(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{407:function(s,t,a){"use strict";a.r(t);var e=a(54),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"frontmatter-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[s._v("#")]),s._v(" "+s._s(s.$frontmatter.title))]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("All commands for the rest of this page need to be executed as root.")])]),s._v(" "),a("h2",{attrs:{id:"install-vgpu-unlock-rs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-vgpu-unlock-rs"}},[s._v("#")]),s._v(" Install vgpu_unlock-rs")]),s._v(" "),a("p",[s._v("To fully allow use of consumer GPUs, "),a("RouterLink",{attrs:{to:"/tools/vgpu-unlock-rs.html"}},[s._v("vgpu_unlock-rs")]),s._v(" must be installed.")],1),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p /usr/local/src\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" /usr/local/src\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'https://github.com/mbilker/vgpu_unlock-rs'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" vgpu_unlock-rs\n\ncargo build --release\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./target/release/libvgpu_unlock_rs.so'")]),s._v(" /usr/local/lib\n")])])]),a("h2",{attrs:{id:"configure-system-services"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configure-system-services"}},[s._v("#")]),s._v(" Configure system services")]),s._v(" "),a("p",[s._v("In order to have the NVIDIA vGPU system services use the unlock, modifications must be made to their service definitions.")]),s._v(" "),a("p",[s._v("The following commands create drop-in overrides for each of the services, causing the unlock library to be loaded when they are started.")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" /etc/systemd/system/nvidia-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("vgpu-mgr,vgpud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(".service.d\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[Service]\nEnvironment=LD_PRELOAD=/usr/local/lib/libvgpu_unlock_rs.so'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tee")]),s._v(" /etc/systemd/system/nvidia-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("vgpu-mgr,vgpud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(".service.d/vgpu_unlock-rs.conf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /dev/null\n")])])]),a("p",[s._v("After doing that, run the following command to set both services to run on next boot:")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("systemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" nvidia-"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("vgpu-mgr,vgpud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(".service\n")])])]),a("p",[s._v("Before moving onto configuring the license server and/or vGPU devices for guests, reboot your system to ensure the kernel modules get loaded and services are running.")]),s._v(" "),a("h2",{attrs:{id:"optional-install-a-wrapper-for-nvidia-smi"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optional-install-a-wrapper-for-nvidia-smi"}},[s._v("#")]),s._v(" (OPTIONAL) Install a Wrapper for "),a("code",[s._v("nvidia-smi")])]),s._v(" "),a("p",[s._v("Doing this will allow the "),a("code",[s._v("nvidia-smi")]),s._v(" utility to recognize supported consumer GPUs as supported for running vGPUs. This is necessary to receive valid output from "),a("code",[s._v("nvidia-smi vgpu")]),s._v(" and its related sub-commands.")]),s._v(" "),a("p",[s._v("Ensure "),a("code",[s._v("/usr/local/bin")]),s._v(" is in your PATH environment variable earlier than "),a("code",[s._v("/usr/bin")]),s._v(" and create a file "),a("code",[s._v("/usr/local/bin/nvidia-smi")]),s._v(" with the following contents:")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/usr/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("case")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("\n    vgpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("LD_PRELOAD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/lib/libvgpu_unlock_rs.so"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("esac")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" /usr/bin/nvidia-smi "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$@")]),s._v("\n")])])]),a("p",[s._v("Make that script executable:")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/local/bin/nvidia-smi"')]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);